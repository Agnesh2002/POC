// Generated by view binder compiler. Do not edit!
package com.example.poc.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.poc.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDeviceBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final Button btnFragDeviceDisconnect;

  @NonNull
  public final Button btnFragDeviceWriteData;

  @NonNull
  public final TextView tvFragDeviceAddress;

  @NonNull
  public final TextView tvFragDeviceName;

  private FragmentDeviceBinding(@NonNull FrameLayout rootView,
      @NonNull Button btnFragDeviceDisconnect, @NonNull Button btnFragDeviceWriteData,
      @NonNull TextView tvFragDeviceAddress, @NonNull TextView tvFragDeviceName) {
    this.rootView = rootView;
    this.btnFragDeviceDisconnect = btnFragDeviceDisconnect;
    this.btnFragDeviceWriteData = btnFragDeviceWriteData;
    this.tvFragDeviceAddress = tvFragDeviceAddress;
    this.tvFragDeviceName = tvFragDeviceName;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDeviceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDeviceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_device, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDeviceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_frag_device_disconnect;
      Button btnFragDeviceDisconnect = ViewBindings.findChildViewById(rootView, id);
      if (btnFragDeviceDisconnect == null) {
        break missingId;
      }

      id = R.id.btn_frag_device_write_data;
      Button btnFragDeviceWriteData = ViewBindings.findChildViewById(rootView, id);
      if (btnFragDeviceWriteData == null) {
        break missingId;
      }

      id = R.id.tv_frag_device_address;
      TextView tvFragDeviceAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvFragDeviceAddress == null) {
        break missingId;
      }

      id = R.id.tv_frag_device_name;
      TextView tvFragDeviceName = ViewBindings.findChildViewById(rootView, id);
      if (tvFragDeviceName == null) {
        break missingId;
      }

      return new FragmentDeviceBinding((FrameLayout) rootView, btnFragDeviceDisconnect,
          btnFragDeviceWriteData, tvFragDeviceAddress, tvFragDeviceName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
